#ifndef CONFIG_H
#define CONFIG_H

#include <avr/pgmspace.h>
#include "Arduino.h"

#define AD9106_CARD 1

#if AD9106_CARD == 0
// Coefficient values for frequency polynomial
const float dac1amps_coeffs[18] PROGMEM = {
    7.08484145284516,  -2.39210469638872, 3.03190382731403,  -1.2780625477637,
    -2.02662819796117, 2.85134323177092,  7.77066938833932,  -2.63944304434864,
    3.38297590458549,  -1.44116277407942, -1.78143616179545, 2.84321350629258,
    6.47346849674601,  -2.30153829503586, 3.02997456244584,  -1.3112195775636,
    -1.48944845273898, 2.84476464523946};

const float dac3amps_coeffs[18] PROGMEM = {
    6.685600435238172,   -2.2474062253887186, 2.9375856496971346,
    -1.2539465306263646, -1.894201769895263,  2.8388623877700128,
    7.844591081801947,   -2.6333945415932387, 3.4556223957699808,
    -1.490831394983962,  -1.785975661456817,  2.8404567869178234,
    5.816383887540183,   -1.9570086429229117, 2.586028076633272,
    -1.1070485035303166, -1.991705303669299,  2.837172381147579};

const float dac4amps_coeffs[18] PROGMEM = {
    6.474789913896241,   -2.157174744717809,  2.7006648990450564,
    -1.1243039687099523, -1.8266895051225394, 2.837618401957917,
    7.189483491435499,   -2.4505264807218934, 3.120254347389037,
    -1.3163784586922083, -1.8347976287523866, 2.8316588303425685,
    5.776060813870286,   -2.0166878921562943, 2.615789897693942,
    -1.1158279169512129, -1.6162722349048213, 2.8329463060866176};

// orders of coefficients for polynomials given in dacXamps[:6]
int exps[6] = {12, 16, 21, 26, 4, 5};

// float dac1amps_thresholds[4] = {2.5, 14.6, 255, 426};
// float dac3amps_thresholds[4] = {2.5, 14.8, 255, 455};

const float* dac_amp_coeffs[4] = {dac1amps_coeffs, NULL, dac3amps_coeffs,
                                  dac4amps_coeffs};
int dac_amp_thesholds[4] = {25, 148, 2550, 4550};
#endif

#if AD9106_CARD == 1
// Coefficient values for frequency polynomial
const float dac1amps_coeffs[18] PROGMEM = {
    7.484056955741164,   -2.462528049048345,  3.231844968986826,
    -1.3978841764248446, 3.427996665375562,   2.861402287989426,
    6.975505162856986,   -2.2935941634586072, 2.9733076216135883,
    -1.2627648813060335, -4.878853467484524,  2.864912095535895,
    5.94313851596418,    -2.052711146383252,  2.6481013264941535,
    -1.125138572797715,  -2.9906301237388693, 2.866275688821932};

const float dac2amps_coeffs[18] PROGMEM = {
    7.2445798750764565,  -2.4228779857787828, 3.084797012655779,
    -1.309388377875407,  2.5107864040651027,  2.875793866531745,
    7.287235232854383,   -2.465954920638915,  3.1435034528751666,
    -1.328043925221642,  1.3238260119002214,  2.8726877667409054,
    5.814365178374679,   -1.9294750673756953, 2.5425140990674238,
    -1.0852999871660718, -1.7762624729704306, 2.8625414469311785};

const float dac3amps_coeffs[18] PROGMEM = {
    7.705615361262648,   -2.6619963998223213, 3.4359994466200776,
    -1.471374831239412,  3.3995741999790234,  2.869546882496927,
    7.269207415973804,   -2.4496114735150885, 3.1135131278109465,
    -1.3122613906625764, 1.4871088226668903,  2.8657671088125136,
    7.0488625076487095,  -2.409859510286948,  3.2142630712121427,
    -1.390703212956451,  -3.0649272178643137, 2.861249702126407};

const float dac4amps_coeffs[18] PROGMEM = {
    8.063675140030881,   -2.782169792546534,  3.7212642389048227,
    -1.6297685319355848, -1.2894518007494309, 2.8590688740869608,
    7.294346758199434,   -2.4259893393325838, 3.1657420191218355,
    -1.3529374790908673, -1.9471977466411536, 2.8572593644084185,
    7.3053456593675765,  -2.6028959000658136, 3.4401914553400226,
    -1.493729766446986,  -2.2516919565299056, 2.8620726655881126};

int exps[6] = {12, 16, 21, 26, 4, 5};

// float dac1amps_thresholds[4] = {2.5, 14.6, 255, 426};
// float dac3amps_thresholds[4] = {2.5, 14.8, 255, 455};

const float* dac_amp_coeffs[4] = {dac1amps_coeffs, dac2amps_coeffs,
                                  dac3amps_coeffs, dac4amps_coeffs};
int dac_amp_thesholds[4] = {0, 148, 2550, 4550};
#endif

int get_order(float freq) {
  int count = -1;
  while (freq > 0) {
    freq = floor(freq / 10);
    count += 1;
  }
  return count;
}

// const int dac3phase_offsets[62] PROGMEM = {
//     -25403, -13263, -9110, -6695, -5804, -4821, -4042, -3583, -3287,
//     -2810,  -2482,  -2141, -2083, -1566, -1511, -1380, -1207, -953,
//     -771,   -672,   -518,  -414,  -277,  -179,  -60,   47,    137,
//     237,    349,    473,   585,   739,   850,   989,   1119,  1248,
//     1376,   1491,   1603,  1719,  1814,  1922,  2009,  2082,  2154,
//     2210,   2250,   2293,  2314,  2331,  2343,  2339,  2331,  2321,
//     2308,   2286,   2279,  2288,  2305,  2322,  2360,  2376};

// const int dac4phase_offsets[62] PROGMEM = {
//     -25506, -13213, -8863, -6966, -5624, -4720, -4300, -3788, -3347,
//     -2889,  -2564,  -2191, -2131, -1643, -1578, -1483, -1280, -1024,
//     -856,   -749,   -602,  -500,  -366,  -263,  -149,  -44,   46,
//     139,    251,    372,   477,   626,   734,   863,   989,   1108,
//     1231,   1340,   1447,  1552,  1641,  1742,  1813,  1874,  1932,
//     1971,   1988,   2007,  1998,  1983,  1956,  1910,  1858,  1800,
//     1737,   1662,   1604,  1536,  1470,  1402,  1346,  1260};

// const int* const dacphase_offsets[] PROGMEM = {NULL, dac3phase_offsets,
//                                                dac4phase_offsets};

#endif